1. Take a natural number n as an integer input, print all the factors of the number.

2. Take a natural number n as an integer input, and variable steps of integer type as
input. Then perform the following operations on it.
a. If the number is divisible by 2, then keep on dividing the number n by 2, till
the time the number is divisible by 2 and also increment the variable steps
by 2, each time you divide the number by 2.
b. Also, check If the number is divisible by 3, then keep on dividing the
number n by 3, till the time the number is divisible by 3 and also increment
the variable steps by 3, each time you divide the number by 3.
c. Also, If the number is divisible by 5, then keep on dividing the number n by
5, till the time the number is divisible by 5 and also increment the variable
steps by 5, each time you divide the number by 5.
In the end print the variable steps and final value of number n.

3. Print all the prime factors of a number.

4. Take a natural number n as an integer input, count all the factors of the number
from 1 to n. (Excluding 1 and n). If count Is zero then print “true” otherwise print
“false”.

5. Take a natural number n as an integer input, then check if the number is a prime
number or not. Further Optimise it to square root n.

6. Take n as an input from the user. Then take n numbers as input from the user in an
integer data-type, and print “prime” each time you take an input if the number is
prime and print “not prime” if the number is not a prime number

7. Take two integer inputs x and y. Write a function that takes in x and y as integer
parameters and then print all the Armstrong numbers from x till y(x and y both
inclusive) . Inside this function, use the function isArmstrong() which checks if a
number is an Armstrong number or not and returns true or false accordingly.

8. Given a 7 digit number, you have to pick the last 3 digits of the number of and
put them in the starting.
Eg. 1234567 is given, then this number should transform to 5671234.
